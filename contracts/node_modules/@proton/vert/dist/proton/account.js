"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Account = void 0;
const vm_1 = require("./vm");
const table_1 = require("./table");
const eosio_1 = require("@greymass/eosio");
const bn_1 = require("./bn");
const utils_1 = require("./utils");
const bn_js_1 = __importDefault(require("bn.js"));
function isPromise(promise) {
    return !!promise && typeof promise.then === 'function';
}
class Account {
    constructor(args) {
        this.actions = {};
        this.tables = {};
        this.permissions = [];
        this.codeSequence = 0;
        this.name = eosio_1.Name.from(args.name);
        this.bc = args.bc;
        this.creationTime = this.bc.timestamp;
        // Permissions
        this.permissions = args.permissions || (0, utils_1.generatePermissions)(this.name);
        if (args.enableInline) {
            (0, utils_1.addInlinePermission)(this.name, this.permissions);
        }
        if (args.abi && args.wasm) {
            if (isPromise(args.abi) || isPromise(args.wasm)) {
                Promise
                    .all([args.abi, args.wasm])
                    .then(([abi, wasm]) => this.setContract(abi, wasm));
            }
            else {
                this.setContract(args.abi, args.wasm);
            }
        }
    }
    get isContract() {
        return !!this.abi && !!this.wasm;
    }
    toBigInt() {
        return (0, bn_1.nameToBigInt)(this.name);
    }
    async recreateVm() {
        if (this.wasm) {
            this.vm = vm_1.VM.from(this.wasm, this.bc);
            await this.vm.ready;
        }
    }
    setContract(abi, wasm) {
        this.abi = eosio_1.ABI.from(abi);
        this.wasm = wasm;
        this.codeSequence++;
        this.buildActions();
        this.buildTables();
    }
    setPermissions(permissions) {
        this.permissions = permissions;
    }
    buildActions() {
        this.abi.actions.forEach((action) => {
            const resolved = this.abi.resolveType(action.name.toString());
            this.actions[resolved.name] = (actionData) => {
                const data = {};
                if (Array.isArray(actionData)) {
                    actionData.forEach((arg, i) => data[resolved.fields[i].name] = arg);
                }
                else {
                    for (const field of resolved.fields) {
                        if (!field.type.isOptional && !actionData.hasOwnProperty(field.name)) {
                            throw new Error(`Missing field ${field.name} on action ${action.name}`);
                        }
                        if (actionData.hasOwnProperty(field.name)) {
                            data[field.name] = actionData[field.name];
                        }
                    }
                }
                const serializedData = eosio_1.Serializer.encode({
                    abi: this.abi,
                    type: action.name,
                    object: data,
                }).array;
                return {
                    send: async (authorization, options) => {
                        // .send()
                        if (!authorization) {
                            authorization = `${this.name}@active`;
                        }
                        // .send("account")
                        else if (typeof authorization == "string" && !authorization.includes("@")) {
                            authorization += '@active';
                        }
                        await this.bc.applyTransaction(eosio_1.Transaction.from({
                            actions: [{
                                    account: this.name,
                                    name: eosio_1.Name.from(action.name),
                                    data: serializedData,
                                    authorization: (Array.isArray(authorization) ? authorization : [authorization]).map(_ => eosio_1.PermissionLevel.from(_))
                                }],
                            expiration: 0,
                            ref_block_num: 0,
                            ref_block_prefix: 0,
                            ...(options || {})
                        }), data);
                    }
                };
            };
        });
    }
    buildTables() {
        this.abi.tables.forEach((table) => {
            const resolved = this.abi.resolveType(table.name);
            this.tables[resolved.name] = (scope = (0, bn_1.nameToBigInt)(this.name)) => {
                if (bn_js_1.default.isBN(scope)) {
                    scope = (0, bn_1.bnToBigInt)(scope);
                }
                let tab = this.bc.store.findTable((0, bn_1.nameToBigInt)(this.name), scope, (0, bn_1.nameToBigInt)(eosio_1.Name.from(resolved.name)));
                if (!tab) {
                    tab = this.bc.store.createTable((0, bn_1.nameToBigInt)(this.name), scope, (0, bn_1.nameToBigInt)(eosio_1.Name.from(resolved.name)), (0, bn_1.nameToBigInt)(this.name));
                }
                return new table_1.TableView(tab, this.abi, this.bc);
            };
        });
    }
}
exports.Account = Account;
//# sourceMappingURL=account.js.map