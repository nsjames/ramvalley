import { VM } from "./vm";
import { TableView } from "./table";
import { API, ABI, Name, NameType, PermissionLevelType, ABIDef, TransactionHeader, TimePoint } from "@greymass/eosio";
import { Blockchain } from "./blockchain";
import BN from "bn.js";
export type AccountArgs = Omit<Partial<Account>, 'name' | 'abi' | 'wasm'> & {
    name: NameType;
    abi?: ABIDef | Promise<ABIDef>;
    wasm?: Uint8Array | Promise<Uint8Array>;
    enableInline?: boolean;
};
export declare class Account {
    readonly name: Name;
    readonly bc: Blockchain;
    readonly creationTime: TimePoint;
    readonly actions: {
        [key: string]: (actionData?: any[] | object) => {
            send: (authorization?: string | PermissionLevelType | PermissionLevelType[], options?: Partial<TransactionHeader>) => Promise<void>;
        };
    };
    readonly tables: {
        [key: string]: (scope?: bigint | BN) => TableView;
    };
    permissions: API.v1.AccountPermission[];
    wasm?: Uint8Array;
    codeSequence: number;
    abi?: ABI;
    vm?: VM;
    constructor(args: AccountArgs);
    get isContract(): boolean;
    toBigInt(): bigint;
    recreateVm(): Promise<void>;
    setContract(abi: ABIDef, wasm: Uint8Array): void;
    setPermissions(permissions: API.v1.AccountPermission[]): void;
    buildActions(): void;
    buildTables(): void;
}
