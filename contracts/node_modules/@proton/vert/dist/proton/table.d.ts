import { PrefixedStore, Store, StoreChange } from "../store";
import BTree from "sorted-btree";
import { ABI, Name } from "@greymass/eosio";
import Buffer from "../buffer";
import { Blockchain } from "./blockchain";
import BN from "bn.js";
declare class KeyValueObject {
    id: number;
    tableId: number;
    primaryKey: bigint;
    payer: bigint;
    value: Uint8Array;
    constructor(args: Partial<KeyValueObject>);
    clone(): KeyValueObject;
}
declare class Table extends PrefixedStore<bigint, KeyValueObject> {
    private _code;
    private _scope;
    private _table;
    private payer;
    private _prefix?;
    private seq;
    private _size;
    static serializePrefix(code: bigint, scope: bigint, table: bigint): Buffer;
    static bigintToBuffer(v: bigint): Buffer;
    constructor(store: TableStore, options?: any);
    get code(): bigint;
    get scope(): bigint;
    get table(): bigint;
    get size(): number;
    prefix(): Buffer;
    key(key: bigint): Buffer;
    lowestKey(): bigint;
    highestKey(): bigint;
    parsePrefix(key: Buffer): Uint8Array;
    set(key: bigint, value: KeyValueObject): void;
    delete(key: bigint): void;
    has(key: bigint): boolean;
    revert(change: StoreChange): void;
}
declare class IndexObject<K> implements IndexKey<K> {
    tableId: number;
    primaryKey: bigint;
    payer: bigint;
    secondaryKey: K;
    constructor(args: Partial<IndexObject<K>>);
    static compareTable(a: any, b: any): 0 | 1 | -1;
    static compare(a: any, b: any): number;
    static comparePrimitives(a: any, b: any): number;
    static compareBuffer(a: IndexObject<Buffer>, b: IndexObject<Buffer>): number;
    clone(): IndexObject<K>;
}
interface IndexPrimaryKey {
    tableId: number;
    primaryKey: bigint;
}
interface IndexKey<K> extends IndexPrimaryKey {
    secondaryKey: K;
    ignorePrimaryKey?: boolean;
}
declare class SecondaryKeyStore<K> {
    private parent;
    byPrimary: BTree<IndexPrimaryKey, IndexObject<K>>;
    bySecondary: BTree<IndexKey<K>, IndexObject<K>>;
    constructor(parent: TableStore, comparePrimary: any, compareSecondary: any);
    get(key: IndexPrimaryKey): IndexObject<K>;
    set(key: IndexKey<K> | undefined, newKey: IndexObject<K>, isReverting?: boolean): void;
    delete(key: IndexKey<K>, isReverting?: boolean): void;
    next(key: IndexPrimaryKey): IndexObject<K>;
    lowerbound(key: IndexPrimaryKey): IndexObject<K>;
    upperbound(key: IndexPrimaryKey): IndexObject<K>;
    secondary: {
        lowest: any;
        highest: any;
        get: (key: IndexKey<K>) => IndexObject<K>;
        penultimate: (tableId: number) => IndexObject<K>;
        lowerbound: (key: IndexKey<K>) => IndexObject<K>;
        upperbound: (key: IndexKey<K>) => IndexObject<K>;
        prev: (key: IndexKey<K>) => IndexObject<K>;
        next: (key: IndexKey<K>) => IndexObject<K>;
    };
}
declare class Index64 extends SecondaryKeyStore<bigint> {
    constructor(store: TableStore);
}
declare class Index128 extends SecondaryKeyStore<bigint> {
    constructor(store: TableStore);
}
declare class Index256 extends SecondaryKeyStore<Buffer> {
    constructor(store: TableStore);
}
declare class IndexDouble extends SecondaryKeyStore<number> {
    constructor(store: TableStore);
}
declare class TableStore extends Store<Buffer, KeyValueObject> {
    idx64: Index64;
    idx128: Index128;
    idx256: Index256;
    idxDouble: IndexDouble;
    constructor(Prefix?: typeof Table);
    createTable(code: bigint, scope: bigint, table: bigint, payer: bigint): Table;
    findTable(code: bigint, scope: bigint, table: bigint): Table;
    getTableById(id: number): Table;
}
declare class TableView {
    private tab;
    private abi;
    private bc;
    readonly name: string;
    readonly type: ABI.Table;
    constructor(tab: Table, abi: ABI, bc: Blockchain);
    get(primaryKey: bigint): any;
    set(primaryKey: bigint, payer: Name, tableData: object): void;
    getTableRow(primaryKey: bigint | BN): any;
    getTableRows(lowerBound?: bigint | BN, options?: {
        limit?: number;
    }): any;
}
export { Table, KeyValueObject, IndexObject, SecondaryKeyStore, TableStore, TableView, };
