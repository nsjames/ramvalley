"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logExecutionTrace = exports.contextToExecutionTrace = exports.isAuthoritySatisfied = exports.addInlinePermission = exports.generatePermissions = exports.findLastIndex = void 0;
const eosio_1 = require("@greymass/eosio");
const loglevel_1 = __importDefault(require("loglevel"));
const types_1 = require("./types");
const safe_1 = __importDefault(require("colors/safe"));
/**
* Returns the index of the last element in the array where predicate is true, and -1
* otherwise.
* @param array The source array to search in
* @param predicate find calls predicate once for each element of the array, in descending
* order, until it finds one where predicate returns true. If such an element is found,
* findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
*/
function findLastIndex(array, predicate) {
    let l = array.length;
    while (l--) {
        if (predicate(array[l], l, array))
            return l;
    }
    return -1;
}
exports.findLastIndex = findLastIndex;
/**
 * It generates a list of permissions for a given account name
 * @param {Name} name - The name of the account to create.
 * @returns The `generatePermissions` function returns an array of `AccountPermission` objects.
 */
// @ts-ignore
const generatePermissions = (name) => {
    const defaultPerms = [
        { perm_name: 'owner', parent: '' },
        { perm_name: 'active', parent: 'owner' }
    ];
    return defaultPerms.map(({ perm_name, parent }) => types_1.AccountPermission.from({
        perm_name,
        parent,
        required_auth: eosio_1.Authority.from({
            threshold: 1,
            accounts: [{
                    weight: 1,
                    permission: eosio_1.PermissionLevel.from({
                        actor: name,
                        permission: perm_name
                    })
                }]
        })
    }));
};
exports.generatePermissions = generatePermissions;
/**
 * Add the permission `eosio.code` to the `active` permission of the account `name`
 * @param {Name} name - The name of the account to be created.
 * @param {API.v1.AccountPermission[]} permissions - The permissions to add to the account.
 */
const addInlinePermission = (name, permissions) => {
    const activePerm = permissions.find(perm => perm.perm_name.equals(eosio_1.Name.from("active")));
    activePerm.required_auth.accounts.push(types_1.PermissionLevelWeight.from({
        weight: 1,
        permission: eosio_1.PermissionLevel.from({
            actor: name,
            permission: 'eosio.code'
        })
    }));
    activePerm.required_auth.sort();
};
exports.addInlinePermission = addInlinePermission;
/**
 * Given an authority and a permission level,
 * return true if the permission level is satisfied by the authority
 * @param {Authority} authority - The authority to check against.
 * @param {PermissionLevel} permission - PermissionLevel
 */
function isAuthoritySatisfied(authority, permission) {
    const weight = authority.accounts.reduce((acc, account) => {
        if (account.permission.equals(permission)) {
            acc += account.weight.toNumber();
        }
        return acc;
    }, 0);
    return Boolean(weight >= authority.threshold.toNumber());
}
exports.isAuthoritySatisfied = isAuthoritySatisfied;
const contextToExecutionTrace = (context) => ({
    contract: context.receiver.name,
    action: context.action,
    isInline: context.isInline,
    isNotification: context.isNotification,
    firstReceiver: context.firstReceiver.name,
    sender: context.sender,
    authorization: context.authorization,
    data: context.decodedData,
    actionOrder: context.actionOrdinal,
    executionOrder: context.executionOrder
});
exports.contextToExecutionTrace = contextToExecutionTrace;
const logExecutionTrace = (trace) => {
    loglevel_1.default.debug(safe_1.default.green(`
  \nSTART ACTION
Contract: ${trace.contract}
Action: ${trace.action}
Inline: ${trace.isInline}
Notification: ${trace.isNotification}
First Receiver: ${trace.firstReceiver}
Sender: ${trace.sender}
Authorization: ${JSON.stringify(trace.authorization)}
Data: ${JSON.stringify(trace.data, null, 4)}
Action Order: ${trace.actionOrder}
Execution Order: ${trace.executionOrder}
`));
};
exports.logExecutionTrace = logExecutionTrace;
//# sourceMappingURL=utils.js.map