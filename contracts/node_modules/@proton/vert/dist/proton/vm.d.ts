import Buffer from "../buffer";
import { Vert } from "../vert";
import { Action, Name, PermissionLevel, Transaction } from "@greymass/eosio";
import { Blockchain } from "./blockchain";
import { Account } from "./account";
export declare const SecondaryKeyConverter: {
    uint64: {
        from: (buffer: Buffer) => bigint;
        to: (buffer: Buffer, value: bigint) => void;
    };
    uint128: {
        from: (buffer: Buffer) => bigint;
        to: (buffer: Buffer, value: bigint) => void;
    };
    int128: {
        from: (buffer: Buffer) => bigint;
        to: (buffer: Buffer, value: bigint) => void;
    };
    checksum256: {
        from: (buffer: Buffer) => Buffer;
        to: (buffer: Buffer, value: Buffer) => void;
    };
    double: {
        from: (buffer: Buffer) => number;
        to: (buffer: Buffer, value: number) => void;
    };
};
declare class VM extends Vert {
    private context;
    private kvCache;
    private idx64;
    private idx128;
    private idx256;
    private idxDouble;
    private bc;
    imports: any;
    static from(wasm: Uint8Array | Promise<Uint8Array> | VM, bc: Blockchain): VM;
    constructor(wasm: Uint8Array | Promise<Uint8Array>, bc: Blockchain);
    private printStorage;
    private findTable;
    private findOrCreateTable;
    private genericIndex;
    apply(context: VM.Context): void;
    finalize(): void;
}
declare namespace VM {
    class Context {
        sender: Name;
        actionOrdinal: number;
        executionOrder: number;
        firstReceiver: Account;
        receiver: Account;
        action: Name;
        data: Uint8Array;
        returnValue: Uint8Array;
        authorization: PermissionLevel[];
        actionsQueue: VM.Context[];
        notificationsQueue: VM.Context[];
        transaction: Transaction;
        decodedData: Action;
        constructor(init?: Partial<Context>);
        get isInline(): boolean;
        get isNotification(): boolean;
    }
}
export { VM, };
