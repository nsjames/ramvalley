export declare const bufferToBigInt: (buf: Buffer) => bigint;
/**
 * converts a big int to a buffer
 * @param bigIntVar {BigInteger}
 * @param bytesNumber
 * @param little
 * @param signed
 * @returns {Buffer}
 */
export declare function readBufferFromBigInt(bigIntVar: bigint, bytesNumber: number, little: boolean): Buffer;
export default class Buffer extends Uint8Array {
    view?: DataView;
    static from_(buffer: any): Buffer;
    static from_(buffer: string, encoding: string): Buffer;
    static from_(buffer: ArrayBuffer, byteOffset: number): Buffer;
    static from_(buffer: ArrayBuffer, byteOffset: number, length: number): Buffer;
    static alloc(size: number, fill?: number): Buffer;
    static isBuffer(obj: any): boolean;
    static compare(buf1: Buffer | Uint8Array, buf2: Buffer | Uint8Array): 0 | 1 | -1;
    static concat(list: (Buffer | Uint8Array)[]): Buffer;
    readBigInt64LE(offset?: number): bigint;
    writeBigInt64LE(value: bigint, offset?: number): void;
    readBigUInt64LE(offset?: number): bigint;
    writeBigUInt64LE(value: bigint, offset?: number): void;
    readUInt32LE(offset?: number): number;
    writeUInt32LE(value: number, offset?: number): void;
    writeBigUInt64BE(value: bigint, offset?: number): void;
    readDoubleLE(offset?: number): number;
    readDoubleBE(offset?: number): number;
    writeDoubleLE(value: number, offset?: number): void;
    writeDoubleBE(value: number, offset?: number): void;
    toString(encoding?: string): string;
}
