"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverUncompressedDigest = exports.recoverUncompressed = exports.getCurve = void 0;
const eosio_1 = require("@greymass/eosio");
const elliptic_1 = require("elliptic");
const curves = {};
/**
 * Get curve for key type.
 * @internal
 */
function getCurve(type) {
    let rv = curves[type];
    if (!rv) {
        if (type === 'K1') {
            rv = curves[type] = new elliptic_1.ec('secp256k1');
        }
        else if (type === 'R1') {
            rv = curves[type] = new elliptic_1.ec('p256');
        }
        else {
            throw new Error(`Unknown curve type: ${type}`);
        }
    }
    return rv;
}
exports.getCurve = getCurve;
/**
 * Recover public key from signature and recovery id.
 * @internal
 */
function recoverUncompressed(signature, message, type) {
    const curve = getCurve(type);
    const recid = signature[0] - 31;
    const r = signature.subarray(1, 33);
    const s = signature.subarray(33);
    const point = curve.recoverPubKey(message, { r, s }, recid);
    return new Uint8Array(point.encode());
}
exports.recoverUncompressed = recoverUncompressed;
function recoverUncompressedDigest(signature, digest) {
    digest = eosio_1.Checksum256.from(digest);
    const uncompressed = recoverUncompressed(signature.data.array, digest.array, signature.type);
    return uncompressed;
}
exports.recoverUncompressedDigest = recoverUncompressedDigest;
//# sourceMappingURL=curve.js.map