"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Memory = void 0;
const buffer_1 = __importDefault(require("./buffer"));
class Memory {
    static create(initial) {
        return new Memory(new WebAssembly.Memory({ initial: initial }));
    }
    constructor(memory) {
        this.memory = memory;
    }
    get buffer() {
        return this.memory.buffer;
    }
    readString(offset, length = 0) {
        if (!length) {
            const memoryView = new Uint8Array(this.memory.buffer, 0, this.memory.buffer.byteLength);
            for (let i = offset; i < memoryView.length; ++i) {
                if (!memoryView[i]) {
                    length = i - offset;
                    break;
                }
            }
        }
        return buffer_1.default.from_(this.memory.buffer, offset, length).toString();
    }
    readUInt64(offset) {
        return buffer_1.default.from_(this.memory.buffer, offset, 8).readBigUInt64LE();
    }
    readUInt128(offset) {
        const buffer = buffer_1.default.from_(this.memory.buffer, offset, 16);
        const low = buffer.readBigUInt64LE(0);
        const high = buffer.readBigUInt64LE(8);
        return (high << 64n) | low;
    }
    readInt128(offset) {
        return BigInt.asIntN(128, this.readUInt128(offset));
    }
    readHex(offset, length) {
        return buffer_1.default.from_(this.memory.buffer, offset, length).toString('hex');
    }
    writeUInt64(offset, value) {
        buffer_1.default.from_(this.memory.buffer, offset, 8).writeBigUInt64LE(value);
    }
}
exports.Memory = Memory;
//# sourceMappingURL=memory.js.map